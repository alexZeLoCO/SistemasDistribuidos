#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <perror.h>
#include <semaphore.h>
#include <pthread.h>

/**
 * Cola circular de trabajos.
 */
struct cola_trabajos
{
	int tamanno,
			* q,
			head, // Posicion inserccion siguiente elemento
			tail; // Posicion extraccion siguiente elemento
	sem_t hay_espacio,
				hay_algo;
	pthread_mutex_t m;
};

/**
 * Muestra un error y sale.
 */
void err (char* msg, int err_no)
{
		perror(msg);
		exit(err_no);
		return;
}

/**
 * Inicializa una cola.
 */
void inicializar_cola (struct cola_trabajos * la_cola, int tamanno)
{
	if (tamanno <= 0)	err("ERR. Tamanno cola invalido.\n", 1);
	if ((la_cola->q = (int*) malloc (tamanno * sizeof(int))) == NULL)
		err("ERR. Fallo en malloc.\n", 1);
	la_cola->tamanno = tamanno;
	if (sem_init(&(la_cola->hay_espacio), 0, tamanno) == -1)
		err("ERR. Fallo en sem_init.\n", 1);
	if (sem_init(&(la_cola->hay_algo), 0, 0) == -1)
		err("ERR. Fallo en sem_init.\n", 1);
	if (pthread_mutex_init(&(la_cola->m), NULL) != 0)
		err("ERR. Fallo en pthread_mutex_init.\n", 1);
	return;
}

/**
 * Destruye una cola.
 */
void destruir_cola (struct cola_trabajos * la_cola)
{
	if (la_cola == NULL)	err("ERR. Cola NULL.\n", 1);
	if (la_cola->q != NULL)		free(la_cola->q);
	if ((sem_destroy(&(mi_cola->hay_espacio)) == -1)
		err("ERR. Fallo en sem_destroy.\n", 1);
	if ((sem_destroy(&(mi_cola->hay_algo)) == -1)
		err("ERR. Fallo en sem_destroy.\n", 1);
	if ((pthread_mutex_destroy(&(mi_cola->m))) != 0)
		err("ERR. Fallo en pthread_mutex_destroy.\n", 1);
	return;
}

int obtener_dato_cola (struct cola_trabajos * la_cola)
{
	if (la_cola == NULL)	err("ERR. Cola NULL.\n", 2);

}

int main ()
{
	return 0;
}
